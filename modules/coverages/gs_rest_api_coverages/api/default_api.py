# coding: utf-8

"""
    GeoServer Coverages

    A coverage is a raster data set which originates from a coverage store.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gs_rest_api_coverages.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_coverage(self, **kwargs):  # noqa: E501
        """delete_coverage  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_coverage_with_http_info(self, **kwargs):  # noqa: E501
        """delete_coverage  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages/{coverage}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_coverage_store(self, **kwargs):  # noqa: E501
        """delete_coverage_store  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_coverage_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_coverage_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_coverage_store_with_http_info(self, **kwargs):  # noqa: E501
        """delete_coverage_store  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_coverage_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_coverage(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """delete_workspace_coverage  # noqa: E501

        Delete a coverage (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_coverage(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str coverage: The name of the coverage (required)
        :param bool recurse: The recurse controls recursive deletion. When set to true all stores containing the resource are also removed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_coverage_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_coverage_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def delete_workspace_coverage_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """delete_workspace_coverage  # noqa: E501

        Delete a coverage (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_coverage_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str coverage: The name of the coverage (required)
        :param bool recurse: The recurse controls recursive deletion. When set to true all stores containing the resource are also removed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_coverage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `delete_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'store' is set
        if ('store' not in params or
                params['store'] is None):
            raise ValueError("Missing the required parameter `store` when calling `delete_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if ('coverage' not in params or
                params['coverage'] is None):
            raise ValueError("Missing the required parameter `coverage` when calling `delete_workspace_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workspace_coverage_store(self, **kwargs):  # noqa: E501
        """delete_workspace_coverage_store  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_coverage_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workspace_coverage_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_coverage_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_workspace_coverage_store_with_http_info(self, **kwargs):  # noqa: E501
        """delete_workspace_coverage_store  # noqa: E501

        Invalid. Can only delete an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_coverage_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coverage(self, workspace, coverage, **kwargs):  # noqa: E501
        """get_coverage  # noqa: E501

        Get an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage(workspace, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str coverage: The name of the coverage (required)
        :param bool quiet_on_not_found: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coverage_with_http_info(workspace, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coverage_with_http_info(workspace, coverage, **kwargs)  # noqa: E501
            return data

    def get_coverage_with_http_info(self, workspace, coverage, **kwargs):  # noqa: E501
        """get_coverage  # noqa: E501

        Get an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_with_http_info(workspace, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str coverage: The name of the coverage (required)
        :param bool quiet_on_not_found: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'coverage', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coverage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_coverage`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if ('coverage' not in params or
                params['coverage'] is None):
            raise ValueError("Missing the required parameter `coverage` when calling `get_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages/{coverage}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_coverage_store(self, workspace, **kwargs):  # noqa: E501
        """get_coverage_store  # noqa: E501

        Get the coverages available for the provided workspace.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str list: If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_coverage_store_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_coverage_store_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_coverage_store_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """get_coverage_store  # noqa: E501

        Get the coverages available for the provided workspace.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_coverage_store_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str list: If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_coverage(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """get_workspace_coverage  # noqa: E501

        Get an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_coverage(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage datastore (required)
        :param str coverage: The name of the coverage (required)
        :param bool quiet_on_not_found: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_coverage_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_coverage_with_http_info(workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def get_workspace_coverage_with_http_info(self, workspace, store, coverage, **kwargs):  # noqa: E501
        """get_workspace_coverage  # noqa: E501

        Get an individual coverage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_coverage_with_http_info(workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage datastore (required)
        :param str coverage: The name of the coverage (required)
        :param bool quiet_on_not_found: The quietOnNotFound parameter avoids to log an Exception when the coverage is not present. Note that 404 status code will be returned anyway.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'coverage', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_coverage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'store' is set
        if ('store' not in params or
                params['store'] is None):
            raise ValueError("Missing the required parameter `store` when calling `get_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if ('coverage' not in params or
                params['coverage'] is None):
            raise ValueError("Missing the required parameter `coverage` when calling `get_workspace_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_coverage_store(self, workspace, store, **kwargs):  # noqa: E501
        """get_workspace_coverage_store  # noqa: E501

        Get the coverages available for the provided workspace and data store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_coverage_store(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str list: If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_coverage_store_with_http_info(workspace, store, **kwargs)  # noqa: E501
            return data

    def get_workspace_coverage_store_with_http_info(self, workspace, store, **kwargs):  # noqa: E501
        """get_workspace_coverage_store  # noqa: E501

        Get the coverages available for the provided workspace and data store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_coverage_store_with_http_info(workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str list: If the list parameter value is equal to \"all\" all the coverages available in the data source (even the non published ones) will be returned. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'store', 'list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_workspace_coverage_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if ('store' not in params or
                params['store'] is None):
            raise ValueError("Missing the required parameter `store` when calling `get_workspace_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html', 'application/xml', 'application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage(self, **kwargs):  # noqa: E501
        """post_coverage  # noqa: E501

        Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_coverage_with_http_info(self, **kwargs):  # noqa: E501
        """post_coverage  # noqa: E501

        Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages/{coverage}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_coverage_store(self, body, workspace, **kwargs):  # noqa: E501
        """post_coverage_store  # noqa: E501

        Create a new coverage, the coverage definition needs to reference a store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to POST (required)
        :param str workspace: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_coverage_store_with_http_info(body, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.post_coverage_store_with_http_info(body, workspace, **kwargs)  # noqa: E501
            return data

    def post_coverage_store_with_http_info(self, body, workspace, **kwargs):  # noqa: E501
        """post_coverage_store  # noqa: E501

        Create a new coverage, the coverage definition needs to reference a store.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_coverage_store_with_http_info(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to POST (required)
        :param str workspace: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_coverage_store`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `post_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_coverage(self, **kwargs):  # noqa: E501
        """post_workspace_coverage  # noqa: E501

        Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_coverage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_coverage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_coverage_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_workspace_coverage_with_http_info(self, **kwargs):  # noqa: E501
        """post_workspace_coverage  # noqa: E501

        Invalid. Use POST on the coverages endpoint to add a new coverage, or PUT on an individual coverage to edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_coverage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_coverage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workspace_coverage_store(self, body, workspace, store, **kwargs):  # noqa: E501
        """post_workspace_coverage_store  # noqa: E501

        Create a new coverage, the underlying data store must exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_coverage_store(body, workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to POST (required)
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workspace_coverage_store_with_http_info(body, workspace, store, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_coverage_store_with_http_info(body, workspace, store, **kwargs)  # noqa: E501
            return data

    def post_workspace_coverage_store_with_http_info(self, body, workspace, store, **kwargs):  # noqa: E501
        """post_workspace_coverage_store  # noqa: E501

        Create a new coverage, the underlying data store must exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_coverage_store_with_http_info(body, workspace, store, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to POST (required)
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'store']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workspace_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workspace_coverage_store`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `post_workspace_coverage_store`")  # noqa: E501
        # verify the required parameter 'store' is set
        if ('store' not in params or
                params['store'] is None):
            raise ValueError("Missing the required parameter `store` when calling `post_workspace_coverage_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage(self, **kwargs):  # noqa: E501
        """put_coverage  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_coverage_with_http_info(self, **kwargs):  # noqa: E501
        """put_coverage  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages/{coverage}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_coverage_store(self, **kwargs):  # noqa: E501
        """put_coverage_store  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_coverage_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_coverage_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_coverage_store_with_http_info(self, **kwargs):  # noqa: E501
        """put_coverage_store  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_coverage_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coverages', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_coverage(self, body, workspace, store, coverage, **kwargs):  # noqa: E501
        """put_workspace_coverage  # noqa: E501

        Update an individual coverage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_coverage(body, workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to PUT (required)
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str coverage: The name of the coverage (required)
        :param list[str] calculate: Comma-seperated list of optional fields to calculate. Optional fields include: \"nativebbox\", \"latlonbbox\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_coverage_with_http_info(body, workspace, store, coverage, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_coverage_with_http_info(body, workspace, store, coverage, **kwargs)  # noqa: E501
            return data

    def put_workspace_coverage_with_http_info(self, body, workspace, store, coverage, **kwargs):  # noqa: E501
        """put_workspace_coverage  # noqa: E501

        Update an individual coverage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_coverage_with_http_info(body, workspace, store, coverage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoverageInfoWrapper body: The body of the coverage to PUT (required)
        :param str workspace: The name of the workspace (required)
        :param str store: The name of the coverage data store (required)
        :param str coverage: The name of the coverage (required)
        :param list[str] calculate: Comma-seperated list of optional fields to calculate. Optional fields include: \"nativebbox\", \"latlonbbox\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'store', 'coverage', 'calculate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_coverage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `put_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'store' is set
        if ('store' not in params or
                params['store'] is None):
            raise ValueError("Missing the required parameter `store` when calling `put_workspace_coverage`")  # noqa: E501
        # verify the required parameter 'coverage' is set
        if ('coverage' not in params or
                params['coverage'] is None):
            raise ValueError("Missing the required parameter `coverage` when calling `put_workspace_coverage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'store' in params:
            path_params['store'] = params['store']  # noqa: E501
        if 'coverage' in params:
            path_params['coverage'] = params['coverage']  # noqa: E501

        query_params = []
        if 'calculate' in params:
            query_params.append(('calculate', params['calculate']))  # noqa: E501
            collection_formats['calculate'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'text/xml', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workspace_coverage_store(self, **kwargs):  # noqa: E501
        """put_workspace_coverage_store  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_coverage_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workspace_coverage_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_coverage_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_workspace_coverage_store_with_http_info(self, **kwargs):  # noqa: E501
        """put_workspace_coverage_store  # noqa: E501

        Invalid. Use POST for adding a new coverage, or PUT on an individual coverage to edit that type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_coverage_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workspace_coverage_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/coveragestores/{store}/coverages', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
