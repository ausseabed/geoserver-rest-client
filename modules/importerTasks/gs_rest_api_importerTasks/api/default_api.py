# coding: utf-8

"""
    GeoServer Importer Extension - Tasks

    The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The tasks endpoint controls individual tasks within an import job. The importer extension is an optional install and may not be available on all deployments of GeoServer  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: geoserver-users@sourceforge.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gs_rest_api_importerTasks.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_task(self, import_id, task_id, **kwargs):  # noqa: E501
        """Remove task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_task_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_task_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def delete_task_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Remove task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `delete_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `delete_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `get_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `get_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_layer(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the layer of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_layer(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_layer_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_layer_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_layer_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the layer of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_layer_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_layer`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/layer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_progress(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the current state and import progress of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_progress(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_progress_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_progress_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_progress_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the current state and import progress of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_progress_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_progress`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/htm'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_target(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the store of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_target(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_target_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_target_with_http_info(import_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_task_target_with_http_info(self, import_id, task_id, **kwargs):  # noqa: E501
        """Retrieve the store of a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_target_with_http_info(import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Store
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `get_task_target`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `get_task_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/target', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Store',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tasks(self, import_id, **kwargs):  # noqa: E501
        """Retrieve all tasks for import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Tasks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tasks_with_http_info(import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tasks_with_http_info(import_id, **kwargs)  # noqa: E501
            return data

    def get_tasks_with_http_info(self, import_id, **kwargs):  # noqa: E501
        """Retrieve all tasks for import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tasks_with_http_info(import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Tasks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `get_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tasks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_task(self, id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a POST to imports/<importId>/tasks as a \"Content-type: multipart/form-data\" multipart encoded data as defined by RFC 2388. One or more file can be uploaded this way, and a task will be created for importing them. In case the file being uploaded is a zip file, it will be unzipped on the server side and treated as a directory of files. Alternatively, a new task can be created by issuing a POST as a \"Content-type: application/x-www-form-urlencoded\" form url encoded data containing a url paramerter with the location of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str href: (required)
        :param str state: (required)
        :param str update_mode: (required)
        :param Data data: (required)
        :param Store target: (required)
        :param str progress: (required)
        :param Layer layer: (required)
        :param str error_message: (required)
        :param TransformChain transform_chain: (required)
        :param Messages messages: (required)
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs)  # noqa: E501
            return data

    def post_task_with_http_info(self, id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a POST to imports/<importId>/tasks as a \"Content-type: multipart/form-data\" multipart encoded data as defined by RFC 2388. One or more file can be uploaded this way, and a task will be created for importing them. In case the file being uploaded is a zip file, it will be unzipped on the server side and treated as a directory of files. Alternatively, a new task can be created by issuing a POST as a \"Content-type: application/x-www-form-urlencoded\" form url encoded data containing a url paramerter with the location of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str href: (required)
        :param str state: (required)
        :param str update_mode: (required)
        :param Data data: (required)
        :param Store target: (required)
        :param str progress: (required)
        :param Layer layer: (required)
        :param str error_message: (required)
        :param TransformChain transform_chain: (required)
        :param Messages messages: (required)
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'href', 'state', 'update_mode', 'data', 'target', 'progress', 'layer', 'error_message', 'transform_chain', 'messages', 'import_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'href' is set
        if ('href' not in params or
                params['href'] is None):
            raise ValueError("Missing the required parameter `href` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'update_mode' is set
        if ('update_mode' not in params or
                params['update_mode'] is None):
            raise ValueError("Missing the required parameter `update_mode` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'target' is set
        if ('target' not in params or
                params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'progress' is set
        if ('progress' not in params or
                params['progress'] is None):
            raise ValueError("Missing the required parameter `progress` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if ('layer' not in params or
                params['layer'] is None):
            raise ValueError("Missing the required parameter `layer` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'error_message' is set
        if ('error_message' not in params or
                params['error_message'] is None):
            raise ValueError("Missing the required parameter `error_message` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'transform_chain' is set
        if ('transform_chain' not in params or
                params['transform_chain'] is None):
            raise ValueError("Missing the required parameter `transform_chain` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'messages' is set
        if ('messages' not in params or
                params['messages'] is None):
            raise ValueError("Missing the required parameter `messages` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `post_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'href' in params:
            form_params.append(('href', params['href']))  # noqa: E501
        if 'state' in params:
            form_params.append(('state', params['state']))  # noqa: E501
        if 'update_mode' in params:
            form_params.append(('updateMode', params['update_mode']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'target' in params:
            form_params.append(('target', params['target']))  # noqa: E501
        if 'progress' in params:
            form_params.append(('progress', params['progress']))  # noqa: E501
        if 'layer' in params:
            form_params.append(('layer', params['layer']))  # noqa: E501
        if 'error_message' in params:
            form_params.append(('errorMessage', params['error_message']))  # noqa: E501
        if 'transform_chain' in params:
            form_params.append(('transformChain', params['transform_chain']))  # noqa: E501
        if 'messages' in params:
            form_params.append(('messages', params['messages']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'href' in params:
            form_params.append(('href', params['href']))  # noqa: E501
        if 'state' in params:
            form_params.append(('state', params['state']))  # noqa: E501
        if 'update_mode' in params:
            form_params.append(('updateMode', params['update_mode']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'target' in params:
            form_params.append(('target', params['target']))  # noqa: E501
        if 'progress' in params:
            form_params.append(('progress', params['progress']))  # noqa: E501
        if 'layer' in params:
            form_params.append(('layer', params['layer']))  # noqa: E501
        if 'error_message' in params:
            form_params.append(('errorMessage', params['error_message']))  # noqa: E501
        if 'transform_chain' in params:
            form_params.append(('transformChain', params['transform_chain']))  # noqa: E501
        if 'messages' in params:
            form_params.append(('messages', params['messages']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/htm'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_task(self, id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a POST to imports/<importId>/tasks as a \"Content-type: multipart/form-data\" multipart encoded data as defined by RFC 2388. One or more file can be uploaded this way, and a task will be created for importing them. In case the file being uploaded is a zip file, it will be unzipped on the server side and treated as a directory of files. Alternatively, a new task can be created by issuing a POST as a \"Content-type: application/x-www-form-urlencoded\" form url encoded data containing a url paramerter with the location of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str href: (required)
        :param str state: (required)
        :param str update_mode: (required)
        :param Data data: (required)
        :param Store target: (required)
        :param str progress: (required)
        :param Layer layer: (required)
        :param str error_message: (required)
        :param TransformChain transform_chain: (required)
        :param Messages messages: (required)
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs)  # noqa: E501
            return data

    def post_task_with_http_info(self, id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a POST to imports/<importId>/tasks as a \"Content-type: multipart/form-data\" multipart encoded data as defined by RFC 2388. One or more file can be uploaded this way, and a task will be created for importing them. In case the file being uploaded is a zip file, it will be unzipped on the server side and treated as a directory of files. Alternatively, a new task can be created by issuing a POST as a \"Content-type: application/x-www-form-urlencoded\" form url encoded data containing a url paramerter with the location of the uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_task_with_http_info(id, href, state, update_mode, data, target, progress, layer, error_message, transform_chain, messages, import_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str href: (required)
        :param str state: (required)
        :param str update_mode: (required)
        :param Data data: (required)
        :param Store target: (required)
        :param str progress: (required)
        :param Layer layer: (required)
        :param str error_message: (required)
        :param TransformChain transform_chain: (required)
        :param Messages messages: (required)
        :param str import_id: The ID of the import (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'href', 'state', 'update_mode', 'data', 'target', 'progress', 'layer', 'error_message', 'transform_chain', 'messages', 'import_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'href' is set
        if ('href' not in params or
                params['href'] is None):
            raise ValueError("Missing the required parameter `href` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'update_mode' is set
        if ('update_mode' not in params or
                params['update_mode'] is None):
            raise ValueError("Missing the required parameter `update_mode` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'target' is set
        if ('target' not in params or
                params['target'] is None):
            raise ValueError("Missing the required parameter `target` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'progress' is set
        if ('progress' not in params or
                params['progress'] is None):
            raise ValueError("Missing the required parameter `progress` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if ('layer' not in params or
                params['layer'] is None):
            raise ValueError("Missing the required parameter `layer` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'error_message' is set
        if ('error_message' not in params or
                params['error_message'] is None):
            raise ValueError("Missing the required parameter `error_message` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'transform_chain' is set
        if ('transform_chain' not in params or
                params['transform_chain'] is None):
            raise ValueError("Missing the required parameter `transform_chain` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'messages' is set
        if ('messages' not in params or
                params['messages'] is None):
            raise ValueError("Missing the required parameter `messages` when calling `post_task`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `post_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'href' in params:
            form_params.append(('href', params['href']))  # noqa: E501
        if 'state' in params:
            form_params.append(('state', params['state']))  # noqa: E501
        if 'update_mode' in params:
            form_params.append(('updateMode', params['update_mode']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'target' in params:
            form_params.append(('target', params['target']))  # noqa: E501
        if 'progress' in params:
            form_params.append(('progress', params['progress']))  # noqa: E501
        if 'layer' in params:
            form_params.append(('layer', params['layer']))  # noqa: E501
        if 'error_message' in params:
            form_params.append(('errorMessage', params['error_message']))  # noqa: E501
        if 'transform_chain' in params:
            form_params.append(('transformChain', params['transform_chain']))  # noqa: E501
        if 'messages' in params:
            form_params.append(('messages', params['messages']))  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'href' in params:
            form_params.append(('href', params['href']))  # noqa: E501
        if 'state' in params:
            form_params.append(('state', params['state']))  # noqa: E501
        if 'update_mode' in params:
            form_params.append(('updateMode', params['update_mode']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'target' in params:
            form_params.append(('target', params['target']))  # noqa: E501
        if 'progress' in params:
            form_params.append(('progress', params['progress']))  # noqa: E501
        if 'layer' in params:
            form_params.append(('layer', params['layer']))  # noqa: E501
        if 'error_message' in params:
            form_params.append(('errorMessage', params['error_message']))  # noqa: E501
        if 'transform_chain' in params:
            form_params.append(('transformChain', params['transform_chain']))  # noqa: E501
        if 'messages' in params:
            form_params.append(('messages', params['messages']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/htm'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify task with id {taskId} within import with id {importId}  # noqa: E501

        A PUT request over an existing task can be used to update its representation. The representation can be partial, and just contains the elements that need to be updated. The updateMode of a task normally starts as \"CREATE\", that is, create the target resource if missing. Other possible values are \"REPLACE\", that is, delete the existing features in the target layer and replace them with the task source ones, or \"APPEND\", to just add the features from the task source into an existing layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Task body: The task to create or modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
            return data

    def put_task_with_http_info(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify task with id {taskId} within import with id {importId}  # noqa: E501

        A PUT request over an existing task can be used to update its representation. The representation can be partial, and just contains the elements that need to be updated. The updateMode of a task normally starts as \"CREATE\", that is, create the target resource if missing. Other possible values are \"REPLACE\", that is, delete the existing features in the target layer and replace them with the task source ones, or \"APPEND\", to just add the features from the task source into an existing layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_with_http_info(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Task body: The task to create or modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `put_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `put_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task_file(self, body, import_id, filename, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a PUT containing the raw file content to this endpoint. The name of the uploaded file will be {filename}. The location of the uploaded file will be the top level directory associated with the import, or the \"uploads\" directory in the data directory if no directory is associated with the current import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_file(body, import_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The file contents to upload. (required)
        :param str import_id: The ID of the import (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Tasks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_file_with_http_info(body, import_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_file_with_http_info(body, import_id, filename, **kwargs)  # noqa: E501
            return data

    def put_task_file_with_http_info(self, body, import_id, filename, **kwargs):  # noqa: E501
        """Create a new task  # noqa: E501

        A new task can be created by issuing a PUT containing the raw file content to this endpoint. The name of the uploaded file will be {filename}. The location of the uploaded file will be the top level directory associated with the import, or the \"uploads\" directory in the data directory if no directory is associated with the current import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_file_with_http_info(body, import_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The file contents to upload. (required)
        :param str import_id: The ID of the import (required)
        :param str filename: The filename (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Tasks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'import_id', 'filename', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task_file`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `put_task_file`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `put_task_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['\\*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{filename}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tasks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task_layer(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify the target layer for a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_layer(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer body: The layer to modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_layer_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_layer_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
            return data

    def put_task_layer_with_http_info(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify the target layer for a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_layer_with_http_info(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer body: The layer to modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :param str expand: What level to expand the response object to. Can be \"self\" (expand only the response object and its immediate children), \"all\" (expand all children), \"none\" (don't include any children), or a nonnegative integer, indicating the depth of children to expand to.
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'import_id', 'task_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task_layer`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `put_task_layer`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `put_task_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/layer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_task_target(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify the target store for a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_target(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Store body: The store to modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_task_target_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_task_target_with_http_info(body, import_id, task_id, **kwargs)  # noqa: E501
            return data

    def put_task_target_with_http_info(self, body, import_id, task_id, **kwargs):  # noqa: E501
        """Modify the target store for a task with id {taskId} within import with id {importId}  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_task_target_with_http_info(body, import_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Store body: The store to modify (required)
        :param str import_id: The ID of the import (required)
        :param str task_id: The ID of the task (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'import_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_task_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_task_target`")  # noqa: E501
        # verify the required parameter 'import_id' is set
        if ('import_id' not in params or
                params['import_id'] is None):
            raise ValueError("Missing the required parameter `import_id` when calling `put_task_target`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `put_task_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_id' in params:
            path_params['importId'] = params['import_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/imports/{importId}/tasks/{taskId}/target', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
