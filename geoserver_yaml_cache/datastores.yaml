openapi: 3.0.1
info:
  title: GeoServer Data Stores
  description:
    A data store contains vector format spatial data. It can be a file
    (such as a shapefile), a database (such as PostGIS), or a server (such as a remote
    Web Feature Service).
  contact:
    name: GeoServer
    url: http://geoserver.org/comm/
    email: geoserver-users@sourceforge.net
  version: 1.0.0
servers:
  - url: //localhost:8080/geoserver/rest
paths:
  /workspaces/{workspaceName}/datastores:
    get:
      summary: Get a list of data stores
      description:
        List all data stores in workspace ws. Use the "Accept:" header
        to specify format or append an extension to the endpoint (example "/datastores.xml"
        for XML)
      operationId: getDatastores
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/dataStoreResponse"
              example: |
                <dataStore>
                  <name>sf</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.xml" type="application/xml"/>
                </dataStore>
            application/json:
              schema:
                $ref: "#/components/schemas/dataStoreResponse"
              example: |
                {"dataStores":{"dataStore":[{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.json"}]}}
            text/html:
              schema:
                $ref: "#/components/schemas/dataStoreResponse"
    post:
      summary: Create a new data store
      description: Adds a new data store to the workspace.
      operationId: postDatastores
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
      requestBody:
        description: |
          The data store body information to upload.

          The contents of the connection parameters will differ depending on the type of data store being added.

          - GeoPackage

            Examples:
            - application/xml:

              ```
              <dataStore>
                <name>nyc</name>
                <connectionParameters>
                  <database>file:///path/to/nyc.gpkg</database>
                  <dbtype>geopkg</dbtype>
                </connectionParameters>
              </dataStore>
              ```

            - application/json:

              ```
              {
                "dataStore": {
                  "name": "nyc",
                  "connectionParameters": {
                    "entry": [
                      {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                      {"@key":"dbtype","$":"geopkg"}
                    ]
                  }
                }
              }
              ```

            Connection Parameters:

            | key | description | level | type | required | default |
            | --- | ----------- | ----- | ---- | -------- | ------- |
            | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
            | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
            | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
            | database | Database | user | File | True | ` ` |
            | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
            | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
            | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
            | namespace | Namespace prefix | user | String | False | ` ` |
            | max connections | maximum number of open connections | user | Integer | False | `10` |
            | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
            | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
            | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
            | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
            | dbtype | Type | program | String | True | `geopkg` |
            | passwd | password used to login | user | String | False | ` ` |
            | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
            | min connections | minimum number of pooled connection | user | Integer | False | `1` |
            | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
            | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
            | user | user name to login as | user | String | False | ` ` |

          - PostGIS

            Examples:
            - application/xml:

              ```
              <dataStore>
                <name>nyc</name>
                <connectionParameters>
                  <host>localhost</host>
                  <port>5432</port>
                  <database>nyc</database>
                  <user>bob</user>
                  <passwd>postgres</passwd>
                  <dbtype>postgis</dbtype>
                </connectionParameters>
              </dataStore>
              ```

            - application/json:

              ```
              {
                "dataStore": {
                  "name": "nyc",
                  "connectionParameters": {
                    "entry": [
                      {"@key":"host","$":"localhost"},
                      {"@key":"port","$":"5432"},
                      {"@key":"database","$":"nyc"},
                      {"@key":"user","$":"bob"},
                      {"@key":"passwd","$":"postgres"},
                      {"@key":"dbtype","$":"postgis"}
                    ]
                  }
                }
              }
              ```

            Connection Parameters:

            | key | description | level | type | required | default |
            | --- | ----------- | ----- | ---- | -------- | ------- |
            | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
            | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
            | port | Port | user | Integer | True | `5432` |
            | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
            | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
            | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
            | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
            | dbtype | Type | program | String | True | `postgis` |
            | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
            | namespace | Namespace prefix | user | String | False | ` ` |
            | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
            | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
            | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
            | min connections | minimum number of pooled connection | user | Integer | False | `1` |
            | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
            | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
            | passwd | password used to login | user | String | False | ` ` |
            | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
            | host | Host | user | String | True | `localhost` |
            | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
            | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
            | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
            | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
            | database | Database | user | String | False | ` ` |
            | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
            | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
            | max connections | maximum number of open connections | user | Integer | False | `10` |
            | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
            | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
            | schema | Schema | user | String | False | `public` |
            | user | user name to login as | user | String | True | ` ` |

          - Shapefile

            Examples:
            - application/xml:

              ```
              <dataStore>
                <name>nyc</name>
                <connectionParameters>
                  <url>file:/path/to/nyc.shp</database>
                </connectionParameters>
              </dataStore>
              ```

            - application/json:

              ```
              {
                "dataStore": {
                  "name": "nyc",
                  "connectionParameters": {
                    "entry": [
                      {"@key":"url","$":"file:/path/to/nyc.shp"}
                    ]
                  }
                }
              }
              ```

            Connection Parameters:

            | key | description | level | type | required | default |
            | --- | ----------- | ----- | ---- | -------- | ------- |
            | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
            | namespace | uri to a the namespace | advanced | URI | False | ` ` |
            | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
            | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
            | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
            | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
            | url | url to a .shp file | user | URL | True | ` ` |
            | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
            | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
            | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

          - Directory of spatial files (shapefiles)

            Examples:
            - application/xml:

              ```
              <dataStore>
                <name>nyc</name>
                <connectionParameters>
                  <url>file:/path/to/directory</database>
                </connectionParameters>
              </dataStore>
              ```

            - application/json:

              ```
              {
                "dataStore": {
                  "name": "nyc",
                  "connectionParameters": {
                    "entry": [
                      {"@key":"url","$":"file:/path/to/directory"}
                    ]
                  }
                }
              }
              ```

            Connection Parameters:

            | key | description | level | type | required | default |
            | --- | ----------- | ----- | ---- | -------- | ------- |
            | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
            | namespace | uri to a the namespace | advanced | URI | False | ` ` |
            | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
            | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
            | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
            | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
            | url | url to a .shp file | user | URL | True | ` ` |
            | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
            | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
            | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


          - Web Feature Service

            Examples:
            - application/xml:

              ```
              <dataStore>
                <name>nyc</name>
                <connectionParameters>
                  <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
                </connectionParameters>
              </dataStore>
              ```

            - application/json:

              ```
              {
                "dataStore": {
                  "name": "nyc",
                  "connectionParameters": {
                    "entry": [
                      {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                    ]
                  }
                }
              }
              ```

            Connection Parameters:

            | key | description | level | type | required | default |
            | --- | ----------- | ----- | ---- | -------- | ------- |
            | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
            | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
            | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
            | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
            | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
            | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
            | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
            | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
            | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
            | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
            | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
            | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
            | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
            | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
            | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
            | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
            | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
            | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
            | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
            | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/datastore"
          application/json:
            schema:
              $ref: "#/components/schemas/datastore"
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: URL where the newly created data store can be found
              schema:
                type: string
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
      x-codegen-request-body-name: dataStoreBody

  /workspaces/{workspaceName}/datastores/{storeName}:
    get:
      summary: Retrieve a particular data store from a workspace
      description:
        Controls a particular data store in a given workspace. Use the
        "Accept:" header to specify format or append an extension to the endpoint
        (example "/datastores/{datastore}.xml" for XML).
      operationId: getDataStore
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data store.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the data store to retrieve.
          required: true
          schema:
            type: string
        - name: quietOnNotFound
          in: query
          description:
            The quietOnNotFound parameter avoids logging an exception when
            the data store is not present. Note that 404 status code will still be returned.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/datastore"
              example: |
                <dataStore>
                  <name>sf</name>
                  <enabled>true</enabled>
                  <workspace>
                    <name>sf</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf.xml" type="application/xml"/>
                  </workspace>
                  <connectionParameters>
                    <entry key="url">file:data/sf</entry>
                    <entry key="namespace">http://www.openplans.org/spearfish</entry>
                  </connectionParameters>
                  <__default>false</__default>
                  <featureTypes>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.xml" type="application/xml"/>
                  </featureTypes>
                </dataStore>
            application/json:
              schema:
                $ref: "#/components/schemas/datastore"
              example: |
                {"dataStore":{"name":"sf","enabled":true,"workspace":{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf.json"},"connectionParameters":{"entry":[{"@key":"url","$":"file:data/sf"},{"@key":"namespace","$":"http://www.openplans.org/spearfish"}]},"_default":false,"featureTypes":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.json"}}
            text/html:
              schema:
                $ref: "#/components/schemas/datastore"
    put:
      summary: Modify a data store.
      description:
        Modify data store ds. Use the "Accept:" header to specify format
        or append an extension to the endpoint (example "/datastores/{ds}.xml" for
        XML).
      operationId: putDatastore
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data store.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the data store to modify.
          required: true
          schema:
            type: string
      requestBody:
        description:
          "The updated data store definition.\nFor a PUT, only values which\
          \ should be changed need to be included. The connectionParameters map counts\
          \ as a single value, \nso if you change it all preexisting connection parameters\
          \ will be overwritten.\n\nThe contents of the connection parameters will\
          \ differ depending on the type of data store being added.\n\n- GeoPackage\n\
          \n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n      <description>A\
          \ data store</description>\n      <enabled>true</enabled>\n      <__default>true</__default>\n\
          \      <connectionParameters>\n        <database>file:///path/to/nyc.gpkg</database>\n\
          \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
          \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
          \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
          ,\n        \"connectionParameters\": {\n          \"entry\": [\n       \
          \     {\"@key\":\"database\",\"$\":\"file:///path/to/nyc.gpkg\"},\n    \
          \      ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\
          \n  | key | description | level | type | required | default |\n  | --- |\
          \ ----------- | ----- | ---- | -------- | ------- |\n  | Primary key metadata\
          \ table | The optional table containing primary key structure and sequence\
          \ associations. Can be expressed as 'schema.name' or just 'name' | user\
          \ | String | False | ` ` |\n  | Callback factory | Name of JDBCReaderCallbackFactory\
          \ to enable on the data store | user | String | False | ` ` |\n  | Evictor\
          \ tests per run | number of connections checked by the idle connection evictor\
          \ for each of its runs (defaults to 3) | user | Integer | False | `3` |\n\
          \  | database | Database | user | File | True | ` ` |\n  | Batch insert\
          \ size | Number of records inserted in the same batch (default, 1). For\
          \ optimal performance, set to 100. | user | Integer | False | `1` |\n  |\
          \ fetch size | number of records read with each iteraction with the dbms\
          \ | user | Integer | False | `1000` |\n  | Connection timeout | number of\
          \ seconds the connection pool will wait before timing out attempting to\
          \ get a new connection (default, 20 seconds) | user | Integer | False |\
          \ `20` |\n  | namespace | Namespace prefix | user | String | False | ` `\
          \ |\n  | max connections | maximum number of open connections | user | Integer\
          \ | False | `10` |\n  | Test while idle | Periodically test the connections\
          \ are still valid also while idle in the pool | user | Boolean | False |\
          \ `True` |\n  | Max connection idle time | number of seconds a connection\
          \ needs to stay idle for the evictor to consider closing it | user | Integer\
          \ | False | `300` |\n  | Session startup SQL | SQL statement executed when\
          \ the connection is grabbed from the pool | user | String | False | ` `\
          \ |\n  | validate connections | check connection is alive before using it\
          \ | user | Boolean | False | `True` |\n  | dbtype | Type | program | String\
          \ | True | `geopkg` |\n  | passwd | password used to login | user | String\
          \ | False | ` ` |\n  | Expose primary keys | Expose primary key columns\
          \ as attributes of the feature type | user | Boolean | False | `False` |\n\
          \  | min connections | minimum number of pooled connection | user | Integer\
          \ | False | `1` |\n  | Evictor run periodicity | number of seconds between\
          \ idle object evitor runs (default, 300 seconds) | user | Integer | False\
          \ | `300` |\n  | Session close-up SQL | SQL statement executed when the\
          \ connection is released to the pool | user | String | False | ` ` |\n \
          \ | user | user name to login as | user | String | False | ` ` |\n\n- PostGIS\n\
          \n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n      <description>A\
          \ data store</description>\n      <enabled>true</enabled>\n      <__default>true</__default>\n\
          \      <connectionParameters>\n        <host>localhost</host>\n        <port>5432</port>\n\
          \        <database>nyc</database>\n        <user>bob</user>\n        <passwd>postgres</passwd>\n\
          \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
          \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
          \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
          ,\n        \"connectionParameters\": {\n          \"entry\": [\n       \
          \     {\"@key\":\"host\",\"$\":\"localhost\"},\n            {\"@key\":\"\
          port\",\"$\":\"5432\"},\n            {\"@key\":\"database\",\"$\":\"nyc\"\
          },\n            {\"@key\":\"user\",\"$\":\"bob\"},\n            {\"@key\"\
          :\"passwd\",\"$\":\"postgres\"},\n          ]\n        }\n      }\n    }\n\
          \    ```\n\n  Connection Parameters:\n\n  | key | description | level |\
          \ type | required | default |\n  | --- | ----------- | ----- | ---- | --------\
          \ | ------- |\n  | Connection timeout | number of seconds the connection\
          \ pool will wait before timing out attempting to get a new connection (default,\
          \ 20 seconds) | user | Integer | False | `20` |\n  | validate connections\
          \ | check connection is alive before using it | user | Boolean | False |\
          \ `True` |\n  | port | Port | user | Integer | True | `5432` |\n  | Primary\
          \ key metadata table | The optional table containing primary key structure\
          \ and sequence associations. Can be expressed as 'schema.name' or just 'name'\
          \ | user | String | False | ` ` |\n  | Support on the fly geometry simplification\
          \ | When enabled, operations such as map rendering will pass a hint that\
          \ will enable the usage of ST_Simplify | user | Boolean | False | `True`\
          \ |\n  | create database | Creates the database if it does not exist yet\
          \ | advanced | Boolean | False | `False` |\n  | create database params |\
          \ Extra specifications appeneded to the CREATE DATABASE command | advanced\
          \ | String | False | `` |\n  | dbtype | Type | program | String | True |\
          \ `postgis` |\n  | Batch insert size | Number of records inserted in the\
          \ same batch (default, 1). For optimal performance, set to 100. | user |\
          \ Integer | False | `1` |\n  | namespace | Namespace prefix | user | String\
          \ | False | ` ` |\n  | Max connection idle time | number of seconds a connection\
          \ needs to stay idle for the evictor to consider closing it | user | Integer\
          \ | False | `300` |\n  | Session startup SQL | SQL statement executed when\
          \ the connection is grabbed from the pool | user | String | False | ` `\
          \ |\n  | Expose primary keys | Expose primary key columns as attributes\
          \ of the feature type | user | Boolean | False | `False` |\n  | min connections\
          \ | minimum number of pooled connection | user | Integer | False | `1` |\n\
          \  | Max open prepared statements | Maximum number of prepared statements\
          \ kept open and cached for each connection in the pool. Set to 0 to have\
          \ unbounded caching, to -1 to disable caching | user | Integer | False |\
          \ `50` |\n  | Callback factory | Name of JDBCReaderCallbackFactory to enable\
          \ on the data store | user | String | False | ` ` |\n  | passwd | password\
          \ used to login | user | String | False | ` ` |\n  | encode functions |\
          \ set to true to have a set of filter functions be translated directly in\
          \ SQL. Due to differences in the type systems the result might not be the\
          \ same as evaluating them in memory, including the SQL failing with errors\
          \ while the in memory version works fine. However this allows to push more\
          \ of the filter into the database, increasing performance.the postgis table.\
          \ | advanced | Boolean | False | `False` |\n  | host | Host | user | String\
          \ | True | `localhost` |\n  | Evictor tests per run | number of connections\
          \ checked by the idle connection evictor for each of its runs (defaults\
          \ to 3) | user | Integer | False | `3` |\n  | Loose bbox | Perform only\
          \ primary filter on bbox | user | Boolean | False | `True` |\n  | Evictor\
          \ run periodicity | number of seconds between idle object evitor runs (default,\
          \ 300 seconds) | user | Integer | False | `300` |\n  | Estimated extends\
          \ | Use the spatial index information to quickly get an estimate of the\
          \ data bounds | user | Boolean | False | `True` |\n  | database | Database\
          \ | user | String | False | ` ` |\n  | fetch size | number of records read\
          \ with each iteraction with the dbms | user | Integer | False | `1000` |\n\
          \  | Test while idle | Periodically test the connections are still valid\
          \ also while idle in the pool | user | Boolean | False | `True` |\n  | max\
          \ connections | maximum number of open connections | user | Integer | False\
          \ | `10` |\n  | preparedStatements | Use prepared statements | user | Boolean\
          \ | False | `False` |\n  | Session close-up SQL | SQL statement executed\
          \ when the connection is released to the pool | user | String | False |\
          \ ` ` |\n  | schema | Schema | user | String | False | `public` |\n  | user\
          \ | user name to login as | user | String | True | ` ` |\n\n- Shapefile\n\
          \n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n      <description>A\
          \ data store</description>\n      <enabled>true</enabled>\n      <__default>true</__default>\n\
          \      <connectionParameters>\n        <url>file:/path/to/nyc.shp</database>\n\
          \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
          \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
          \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
          ,\n        \"connectionParameters\": {\n          \"entry\": [\n       \
          \     {\"@key\":\"url\",\"$\":\"file:/path/to/nyc.shp\"}\n          ]\n\
          \        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\n  | key\
          \ | description | level | type | required | default |\n  | --- | -----------\
          \ | ----- | ---- | -------- | ------- |\n  | cache and reuse memory maps\
          \ | only memory map a file one, then cache and reuse the map | advanced\
          \ | Boolean | False | `True` |\n  | namespace | uri to a the namespace |\
          \ advanced | URI | False | ` ` |\n  | filetype | Discriminator for directory\
          \ stores | program | String | False | `shapefile` |\n  | charset | character\
          \ used to decode strings from the DBF file | advanced | Charset | False\
          \ | `ISO-8859-1` |\n  | create spatial index | enable/disable the automatic\
          \ creation of spatial index | advanced | Boolean | False | `True` |\n  |\
          \ fstype | Enable using a setting of 'shape'. | advanced | String | False\
          \ | `shape` |\n  | url | url to a .shp file | user | URL | True | ` ` |\n\
          \  | enable spatial index | enable/disable the use of spatial index for\
          \ local shapefiles | advanced | Boolean | False | `True` |\n  | memory mapped\
          \ buffer | enable/disable the use of memory-mapped io | advanced | Boolean\
          \ | False | `False` |\n  | timezone | time zone used to read dates from\
          \ the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |\n\
          \n- Directory of spatial files (shapefiles)\n\n  Examples:\n  - application/xml:\n\
          \n    ```\n    <dataStore>\n      <description>A data store</description>\n\
          \      <enabled>true</enabled>\n      <__default>true</__default>\n    \
          \  <connectionParameters>\n        <url>file:/path/to/directory</database>\n\
          \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
          \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
          \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
          ,\n        \"connectionParameters\": {\n          \"entry\": [\n       \
          \     {\"@key\":\"url\",\"$\":\"file:/path/to/directory\"}\n          ]\n\
          \        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\n  | key\
          \ | description | level | type | required | default |\n  | --- | -----------\
          \ | ----- | ---- | -------- | ------- |\n  | cache and reuse memory maps\
          \ | only memory map a file one, then cache and reuse the map | advanced\
          \ | Boolean | False | `True` |\n  | namespace | uri to a the namespace |\
          \ advanced | URI | False | ` ` |\n  | filetype | Discriminator for directory\
          \ stores | program | String | False | `shapefile` |\n  | charset | character\
          \ used to decode strings from the DBF file | advanced | Charset | False\
          \ | `ISO-8859-1` |\n  | create spatial index | enable/disable the automatic\
          \ creation of spatial index | advanced | Boolean | False | `True` |\n  |\
          \ fstype | Enable using a setting of 'shape'. | advanced | String | False\
          \ | `shape` |\n  | url | url to a .shp file | user | URL | True | ` ` |\n\
          \  | enable spatial index | enable/disable the use of spatial index for\
          \ local shapefiles | advanced | Boolean | False | `True` |\n  | memory mapped\
          \ buffer | enable/disable the use of memory-mapped io | advanced | Boolean\
          \ | False | `False` |\n  | timezone | time zone used to read dates from\
          \ the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |\n\
          \n\n- Web Feature Service\n\n  Examples:\n  - application/xml:\n\n    ```\n\
          \    <dataStore>\n      <description>A data store</description>\n      <enabled>true</enabled>\n\
          \      <__default>true</__default>\n      <connectionParameters>\n     \
          \   <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>\n\
          \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
          \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
          \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
          ,\n        \"connectionParameters\": {\n          \"entry\": [\n       \
          \     {\"@key\":\"GET_CAPABILITIES_URL\",\"$\":\"http://localhost:8080/geoserver/wfs?request=GetCapabilities\"\
          }\n          ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\
          \n  | key | description | level | type | required | default |\n  | --- |\
          \ ----------- | ----- | ---- | -------- | ------- |\n  | Protocol | Sets\
          \ a preference for the HTTP protocol to use when requesting WFS functionality.\
          \ Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL\
          \ for AUTO | user | Boolean | False | ` ` |\n  | WFS GetCapabilities URL\
          \ | Represents a URL to the getCapabilities document or a server instance.\
          \ | user | URL | False | ` ` |\n  | Buffer Size | This allows the user to\
          \ specify a buffer size in features. This param has a default value of 10\
          \ features. | user | Integer | False | `10` |\n  | Filter compliance | Level\
          \ of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer\
          \ | False | ` ` |\n  | EntityResolver | Sets the entity resolver used to\
          \ expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519`\
          \ |\n  | Time-out | This allows the user to specify a timeout in milliseconds.\
          \ This param has a default value of 3000ms. | user | Integer | False | `3000`\
          \ |\n  | GmlComplianceLevel | Optional OGC GML compliance level required.\
          \ | user | Integer | False | `0` |\n  | Lenient | Indicates that datastore\
          \ should do its best to create features from the provided data even if it\
          \ does not accurately match the schema.  Errors will be logged but the parsing\
          \ will continue if this is true.  Default is false | user | Boolean | False\
          \ | `False` |\n  | Password | This allows the user to specify a username.\
          \ This param should not be used without the USERNAME param. | user | String\
          \ | False | ` ` |\n  | Use Default SRS | Use always the declared DefaultSRS\
          \ for requests and reproject locally if necessary | advanced | Boolean |\
          \ False | `False` |\n  | Namespace | Override the original WFS type name\
          \ namespaces | advanced | String | False | ` ` |\n  | Username | This allows\
          \ the user to specify a username. This param should not be used without\
          \ the PASSWORD param. | user | String | False | ` ` |\n  | Axis Order Filter\
          \ | Indicates axis order used by the remote WFS server for filters. It applies\
          \ only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced\
          \ | String | False | ` ` |\n  | GmlCompatibleTypeNames | Use Gml Compatible\
          \ TypeNames (replace : by _). | user | Boolean | False | `False` |\n  |\
          \ Maximum features | Positive integer used as a hard limit for the amount\
          \ of Features to retrieve for each FeatureType. A value of zero or not providing\
          \ this parameter means no limit. | user | Integer | False | `0` |\n  | Axis\
          \ Order | Indicates axis order used by the remote WFS server in result coordinates.\
          \ It applies only to WFS 1.x.0 servers. Default is Compliant | advanced\
          \ | String | False | `Compliant` |\n  | WFS Strategy | Override wfs stragegy\
          \ with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or\
          \ arcgis strategy. | user | String | False | `auto` |\n  | Try GZIP | Indicates\
          \ that datastore should use gzip to transfer data if the server supports\
          \ it. Default is true | user | Boolean | False | `True` |\n  | Encoding\
          \ | This allows the user to specify the character encoding of the XML-Requests\
          \ sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8`\
          \ |\n  | Outputformat | This allows the user to specify an outputFormat,\
          \ different from the default one. | advanced | String | False | ` ` |\n"
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/datastore"
          application/json:
            schema:
              $ref: "#/components/schemas/datastore"
        required: true
      responses:
        "200":
          description: The data store was successfully updated.
          content: {}
      x-codegen-request-body-name: dataStoreBody
    delete:
      summary: Delete data store
      description: Deletes a data store from the server.
      operationId: deleteDatastore
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data store.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the data store to delete.
          required: true
          schema:
            type: string
        - name: recurse
          in: query
          description:
            The recurse controls recursive deletion. When set to true all
            resources contained in the store are also removed. The default value is
            "false".
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content: {}
  /workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}:
    get:
      description:
        Deprecated. Retrieve the underlying files for the data store as
        a zip file with MIME type application/zip
      operationId: getDataStoreUpload
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data store.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the store to be retrieved
          required: true
          schema:
            type: string
        - name: method
          in: path
          description:
            The upload method. Can be "url", "file", "external". Unused for
            GET
          required: true
          schema:
            type: string
        - name: format
          in: path
          description: The type of source data store (e.g., "shp"). Unused for GET
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content: {}
    put:
      summary: Uploads files to the data store, creating it if necessary
      description:
        Creates or modifies a single data store by uploading spatial data
        or mapping configuration (in case an app-schema data store is targeted) files.
      operationId: putDataStoreUpload
      requestBody:
        content:
          application/zip:
            schema:
              type: string
              format: binary
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the coverage stores.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the store to be retrieved
          required: true
          schema:
            type: string
        - name: method
          in: path
          description:
            The upload method. Can be "url", "file", "external". "file" uploads
            a file from a local source. The body of the request is the file itself.
            "url" uploads a file from an remote source. The body of the request is a
            URL pointing to the file to upload. This URL must be visible from the server.
            "external" uses an existing file on the server. The body of the request
            is the absolute path to the existing file.
          required: true
          schema:
            type: string
        - name: format
          in: path
          description: The type of source data store (e.g., "shp").
          required: true
          schema:
            type: string
        - name: configure
          in: query
          description:
            The configure parameter controls if a coverage/layer are configured
            upon file upload, in addition to creating the store. It can have a value
            of "none" to avoid configuring coverages.
          schema:
            type: string
        - name: target
          in: query
          description:
            The type of target data store (e.g., "shp"). Same as format if
            not provided.
          schema:
            type: string
        - name: update
          in: query
          description:
            The update mode. If "overwrite", will overwrite existing data.
            Otherwise, will append to existing data.
          schema:
            type: string
        - name: charset
          in: query
          description: The character set of the data.
          schema:
            type: string
        - name: filename
          in: query
          description:
            The filename parameter specifies the target file name for the
            file to be uploaded. This is important to avoid clashes with existing files.
          schema:
            type: string
      responses:
        "200":
          description: The data store was successfully updated.
          content: {}
  /workspaces/{workspaceName}/appschemastores/{storeName}/cleanSchemas:
    post:
      summary: Cleans all MongoDB internal stores Schemas for an App-Schema store.
      description: Cleans all MongoDB internal stores Schemas for an App-Schema store.
      operationId: cleanAllMongoSchemas
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the App-Schema store
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content: {}
  ? /workspaces/{workspaceName}/appschemastores/{storeName}/datastores/{internalStoreId}/cleanSchemas
  : post:
      summary: Cleans a MongoDB internal store Schemas for an App-Schema store.
      description: Cleans a MongoDB internal store Schemas for an App-Schema store.
      operationId: cleanMongoSchema
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the App-Schema store
          required: true
          schema:
            type: string
        - name: internalStoreId
          in: path
          description:
            The store ID for the internal MongoDB store as specified on App-Schema
            Mappings.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content: {}
  /workspaces/{workspaceName}/appschemastores/{storeName}/rebuildMongoSchemas:
    post:
      summary: Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
      description:
        Rebuilds all MongoDB internal stores Schemas for an App-Schema
        store.
      operationId: rebuildAllMongoSchemas
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the App-Schema store
          required: true
          schema:
            type: string
        - name: ids
          in: query
          description: Comma separated MongoDB object IDs for use in new generated schema.
          schema:
            type: string
        - name: max
          in: query
          description: Max number of objects for use in new generated schema.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content: {}
  ? /workspaces/{workspaceName}/appschemastores/{storeName}/datastores/{internalStoreId}/rebuildMongoSchemas
  : post:
      summary: Rebuilds a MongoDB internal store Schemas for an App-Schema store.
      description: Rebuilds a MongoDB internal store Schemas for an App-Schema store.
      operationId: rebuildMongoSchema
      parameters:
        - name: workspaceName
          in: path
          description: The name of the worskpace containing the data stores.
          required: true
          schema:
            type: string
        - name: storeName
          in: path
          description: The name of the App-Schema store
          required: true
          schema:
            type: string
        - name: internalStoreId
          in: path
          description:
            The store ID for the internal MongoDB store as specified on App-Schema
            Mappings.
          required: true
          schema:
            type: string
        - name: ids
          in: query
          description: Comma separated MongoDB object IDs for use in new generated schema.
          schema:
            type: string
        - name: max
          in: query
          description: Max number of objects for use in new generated schema.
          schema:
            type: integer
        - name: schema
          in: query
          description: Name of schema to re-build.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content: {}
components:
  schemas:
    dataStoreResponse:
      title: datastores
      type: array
      items:
        title: datastore
        type: object
        properties:
          name:
            type: string
            description: Name of data store
          link:
            type: string
            description: URL to data store definition
    datastoreWrapper:
      title: datastoreWrapper
      type: object
      properties:
        dataStore:
          $ref: "#/components/schemas/datastore"
    datastore:
      title: datastore
      type: object
      properties:
        name:
          type: string
          description: Name of data store
        description:
          type: string
          description: Description of data store
        enabled:
          type: boolean
          description: Whether or not the data store is enabled
        workspace:
          title: workspace
          type: object
          properties:
            name:
              type: string
              description: Name of workspace
            link:
              type: string
              description: URL to workspace definition
        connectionParameters:
          type: array
          items:
            title: entry
            type: object
            properties:
              key:
                type: string
                description: Connection parameter key
              value:
                type: string
                description: Connection parameter value
            description: connection parameter key-value pair
        __default:
          type: boolean
          description: Whether or not the data store is the default data store
        featureTypes:
          type: array
          items:
            type: string
            description: URL to featuretype definition
  requestBodies:
    dataStorePost:
      description: |
        The data store body information to upload.

        The contents of the connection parameters will differ depending on the type of data store being added.

        - GeoPackage

          Examples:
          - application/xml:

            ```
            <dataStore>
              <name>nyc</name>
              <connectionParameters>
                <database>file:///path/to/nyc.gpkg</database>
                <dbtype>geopkg</dbtype>
              </connectionParameters>
            </dataStore>
            ```

          - application/json:

            ```
            {
              "dataStore": {
                "name": "nyc",
                "connectionParameters": {
                  "entry": [
                    {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                    {"@key":"dbtype","$":"geopkg"}
                  ]
                }
              }
            }
            ```

          Connection Parameters:

          | key | description | level | type | required | default |
          | --- | ----------- | ----- | ---- | -------- | ------- |
          | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
          | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
          | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
          | database | Database | user | File | True | ` ` |
          | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
          | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
          | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
          | namespace | Namespace prefix | user | String | False | ` ` |
          | max connections | maximum number of open connections | user | Integer | False | `10` |
          | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
          | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
          | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
          | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
          | dbtype | Type | program | String | True | `geopkg` |
          | passwd | password used to login | user | String | False | ` ` |
          | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
          | min connections | minimum number of pooled connection | user | Integer | False | `1` |
          | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
          | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
          | user | user name to login as | user | String | False | ` ` |

        - PostGIS

          Examples:
          - application/xml:

            ```
            <dataStore>
              <name>nyc</name>
              <connectionParameters>
                <host>localhost</host>
                <port>5432</port>
                <database>nyc</database>
                <user>bob</user>
                <passwd>postgres</passwd>
                <dbtype>postgis</dbtype>
              </connectionParameters>
            </dataStore>
            ```

          - application/json:

            ```
            {
              "dataStore": {
                "name": "nyc",
                "connectionParameters": {
                  "entry": [
                    {"@key":"host","$":"localhost"},
                    {"@key":"port","$":"5432"},
                    {"@key":"database","$":"nyc"},
                    {"@key":"user","$":"bob"},
                    {"@key":"passwd","$":"postgres"},
                    {"@key":"dbtype","$":"postgis"}
                  ]
                }
              }
            }
            ```

          Connection Parameters:

          | key | description | level | type | required | default |
          | --- | ----------- | ----- | ---- | -------- | ------- |
          | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
          | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
          | port | Port | user | Integer | True | `5432` |
          | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
          | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
          | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
          | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
          | dbtype | Type | program | String | True | `postgis` |
          | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
          | namespace | Namespace prefix | user | String | False | ` ` |
          | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
          | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
          | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
          | min connections | minimum number of pooled connection | user | Integer | False | `1` |
          | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
          | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
          | passwd | password used to login | user | String | False | ` ` |
          | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
          | host | Host | user | String | True | `localhost` |
          | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
          | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
          | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
          | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
          | database | Database | user | String | False | ` ` |
          | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
          | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
          | max connections | maximum number of open connections | user | Integer | False | `10` |
          | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
          | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
          | schema | Schema | user | String | False | `public` |
          | user | user name to login as | user | String | True | ` ` |

        - Shapefile

          Examples:
          - application/xml:

            ```
            <dataStore>
              <name>nyc</name>
              <connectionParameters>
                <url>file:/path/to/nyc.shp</database>
              </connectionParameters>
            </dataStore>
            ```

          - application/json:

            ```
            {
              "dataStore": {
                "name": "nyc",
                "connectionParameters": {
                  "entry": [
                    {"@key":"url","$":"file:/path/to/nyc.shp"}
                  ]
                }
              }
            }
            ```

          Connection Parameters:

          | key | description | level | type | required | default |
          | --- | ----------- | ----- | ---- | -------- | ------- |
          | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
          | namespace | uri to a the namespace | advanced | URI | False | ` ` |
          | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
          | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
          | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
          | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
          | url | url to a .shp file | user | URL | True | ` ` |
          | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
          | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
          | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

        - Directory of spatial files (shapefiles)

          Examples:
          - application/xml:

            ```
            <dataStore>
              <name>nyc</name>
              <connectionParameters>
                <url>file:/path/to/directory</database>
              </connectionParameters>
            </dataStore>
            ```

          - application/json:

            ```
            {
              "dataStore": {
                "name": "nyc",
                "connectionParameters": {
                  "entry": [
                    {"@key":"url","$":"file:/path/to/directory"}
                  ]
                }
              }
            }
            ```

          Connection Parameters:

          | key | description | level | type | required | default |
          | --- | ----------- | ----- | ---- | -------- | ------- |
          | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
          | namespace | uri to a the namespace | advanced | URI | False | ` ` |
          | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
          | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
          | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
          | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
          | url | url to a .shp file | user | URL | True | ` ` |
          | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
          | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
          | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


        - Web Feature Service

          Examples:
          - application/xml:

            ```
            <dataStore>
              <name>nyc</name>
              <connectionParameters>
                <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
              </connectionParameters>
            </dataStore>
            ```

          - application/json:

            ```
            {
              "dataStore": {
                "name": "nyc",
                "connectionParameters": {
                  "entry": [
                    {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                  ]
                }
              }
            }
            ```

          Connection Parameters:

          | key | description | level | type | required | default |
          | --- | ----------- | ----- | ---- | -------- | ------- |
          | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
          | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
          | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
          | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
          | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
          | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
          | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
          | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
          | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
          | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
          | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
          | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
          | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
          | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
          | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
          | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
          | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
          | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
          | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
          | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/datastoreWrapper"
      required: true
    dataStorePut:
      description:
        "The updated data store definition.\nFor a PUT, only values which\
        \ should be changed need to be included. The connectionParameters map counts\
        \ as a single value, \nso if you change it all preexisting connection parameters\
        \ will be overwritten.\n\nThe contents of the connection parameters will differ\
        \ depending on the type of data store being added.\n\n- GeoPackage\n\n  Examples:\n\
        \  - application/xml:\n\n    ```\n    <dataStore>\n      <description>A data\
        \ store</description>\n      <enabled>true</enabled>\n      <__default>true</__default>\n\
        \      <connectionParameters>\n        <database>file:///path/to/nyc.gpkg</database>\n\
        \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
        \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
        \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
        ,\n        \"connectionParameters\": {\n          \"entry\": [\n         \
        \   {\"@key\":\"database\",\"$\":\"file:///path/to/nyc.gpkg\"},\n        \
        \  ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\n \
        \ | key | description | level | type | required | default |\n  | --- | -----------\
        \ | ----- | ---- | -------- | ------- |\n  | Primary key metadata table |\
        \ The optional table containing primary key structure and sequence associations.\
        \ Can be expressed as 'schema.name' or just 'name' | user | String | False\
        \ | ` ` |\n  | Callback factory | Name of JDBCReaderCallbackFactory to enable\
        \ on the data store | user | String | False | ` ` |\n  | Evictor tests per\
        \ run | number of connections checked by the idle connection evictor for each\
        \ of its runs (defaults to 3) | user | Integer | False | `3` |\n  | database\
        \ | Database | user | File | True | ` ` |\n  | Batch insert size | Number\
        \ of records inserted in the same batch (default, 1). For optimal performance,\
        \ set to 100. | user | Integer | False | `1` |\n  | fetch size | number of\
        \ records read with each iteraction with the dbms | user | Integer | False\
        \ | `1000` |\n  | Connection timeout | number of seconds the connection pool\
        \ will wait before timing out attempting to get a new connection (default,\
        \ 20 seconds) | user | Integer | False | `20` |\n  | namespace | Namespace\
        \ prefix | user | String | False | ` ` |\n  | max connections | maximum number\
        \ of open connections | user | Integer | False | `10` |\n  | Test while idle\
        \ | Periodically test the connections are still valid also while idle in the\
        \ pool | user | Boolean | False | `True` |\n  | Max connection idle time |\
        \ number of seconds a connection needs to stay idle for the evictor to consider\
        \ closing it | user | Integer | False | `300` |\n  | Session startup SQL |\
        \ SQL statement executed when the connection is grabbed from the pool | user\
        \ | String | False | ` ` |\n  | validate connections | check connection is\
        \ alive before using it | user | Boolean | False | `True` |\n  | dbtype |\
        \ Type | program | String | True | `geopkg` |\n  | passwd | password used\
        \ to login | user | String | False | ` ` |\n  | Expose primary keys | Expose\
        \ primary key columns as attributes of the feature type | user | Boolean |\
        \ False | `False` |\n  | min connections | minimum number of pooled connection\
        \ | user | Integer | False | `1` |\n  | Evictor run periodicity | number of\
        \ seconds between idle object evitor runs (default, 300 seconds) | user |\
        \ Integer | False | `300` |\n  | Session close-up SQL | SQL statement executed\
        \ when the connection is released to the pool | user | String | False | `\
        \ ` |\n  | user | user name to login as | user | String | False | ` ` |\n\n\
        - PostGIS\n\n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n\
        \      <description>A data store</description>\n      <enabled>true</enabled>\n\
        \      <__default>true</__default>\n      <connectionParameters>\n       \
        \ <host>localhost</host>\n        <port>5432</port>\n        <database>nyc</database>\n\
        \        <user>bob</user>\n        <passwd>postgres</passwd>\n      </connectionParameters>\n\
        \    </dataStore>\n    ```\n\n  - application/json:\n\n    ```\n    {\n  \
        \    \"dataStore\": {\n        \"description\": \"A data store\",\n      \
        \  \"enabled\": \"true\",\n        \"_default\": \"true\",\n        \"connectionParameters\"\
        : {\n          \"entry\": [\n            {\"@key\":\"host\",\"$\":\"localhost\"\
        },\n            {\"@key\":\"port\",\"$\":\"5432\"},\n            {\"@key\"\
        :\"database\",\"$\":\"nyc\"},\n            {\"@key\":\"user\",\"$\":\"bob\"\
        },\n            {\"@key\":\"passwd\",\"$\":\"postgres\"},\n          ]\n \
        \       }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\n  | key\
        \ | description | level | type | required | default |\n  | --- | -----------\
        \ | ----- | ---- | -------- | ------- |\n  | Connection timeout | number of\
        \ seconds the connection pool will wait before timing out attempting to get\
        \ a new connection (default, 20 seconds) | user | Integer | False | `20` |\n\
        \  | validate connections | check connection is alive before using it | user\
        \ | Boolean | False | `True` |\n  | port | Port | user | Integer | True |\
        \ `5432` |\n  | Primary key metadata table | The optional table containing\
        \ primary key structure and sequence associations. Can be expressed as 'schema.name'\
        \ or just 'name' | user | String | False | ` ` |\n  | Support on the fly geometry\
        \ simplification | When enabled, operations such as map rendering will pass\
        \ a hint that will enable the usage of ST_Simplify | user | Boolean | False\
        \ | `True` |\n  | create database | Creates the database if it does not exist\
        \ yet | advanced | Boolean | False | `False` |\n  | create database params\
        \ | Extra specifications appeneded to the CREATE DATABASE command | advanced\
        \ | String | False | `` |\n  | dbtype | Type | program | String | True | `postgis`\
        \ |\n  | Batch insert size | Number of records inserted in the same batch\
        \ (default, 1). For optimal performance, set to 100. | user | Integer | False\
        \ | `1` |\n  | namespace | Namespace prefix | user | String | False | ` `\
        \ |\n  | Max connection idle time | number of seconds a connection needs to\
        \ stay idle for the evictor to consider closing it | user | Integer | False\
        \ | `300` |\n  | Session startup SQL | SQL statement executed when the connection\
        \ is grabbed from the pool | user | String | False | ` ` |\n  | Expose primary\
        \ keys | Expose primary key columns as attributes of the feature type | user\
        \ | Boolean | False | `False` |\n  | min connections | minimum number of pooled\
        \ connection | user | Integer | False | `1` |\n  | Max open prepared statements\
        \ | Maximum number of prepared statements kept open and cached for each connection\
        \ in the pool. Set to 0 to have unbounded caching, to -1 to disable caching\
        \ | user | Integer | False | `50` |\n  | Callback factory | Name of JDBCReaderCallbackFactory\
        \ to enable on the data store | user | String | False | ` ` |\n  | passwd\
        \ | password used to login | user | String | False | ` ` |\n  | encode functions\
        \ | set to true to have a set of filter functions be translated directly in\
        \ SQL. Due to differences in the type systems the result might not be the\
        \ same as evaluating them in memory, including the SQL failing with errors\
        \ while the in memory version works fine. However this allows to push more\
        \ of the filter into the database, increasing performance.the postgis table.\
        \ | advanced | Boolean | False | `False` |\n  | host | Host | user | String\
        \ | True | `localhost` |\n  | Evictor tests per run | number of connections\
        \ checked by the idle connection evictor for each of its runs (defaults to\
        \ 3) | user | Integer | False | `3` |\n  | Loose bbox | Perform only primary\
        \ filter on bbox | user | Boolean | False | `True` |\n  | Evictor run periodicity\
        \ | number of seconds between idle object evitor runs (default, 300 seconds)\
        \ | user | Integer | False | `300` |\n  | Estimated extends | Use the spatial\
        \ index information to quickly get an estimate of the data bounds | user |\
        \ Boolean | False | `True` |\n  | database | Database | user | String | False\
        \ | ` ` |\n  | fetch size | number of records read with each iteraction with\
        \ the dbms | user | Integer | False | `1000` |\n  | Test while idle | Periodically\
        \ test the connections are still valid also while idle in the pool | user\
        \ | Boolean | False | `True` |\n  | max connections | maximum number of open\
        \ connections | user | Integer | False | `10` |\n  | preparedStatements |\
        \ Use prepared statements | user | Boolean | False | `False` |\n  | Session\
        \ close-up SQL | SQL statement executed when the connection is released to\
        \ the pool | user | String | False | ` ` |\n  | schema | Schema | user | String\
        \ | False | `public` |\n  | user | user name to login as | user | String |\
        \ True | ` ` |\n\n- Shapefile\n\n  Examples:\n  - application/xml:\n\n   \
        \ ```\n    <dataStore>\n      <description>A data store</description>\n  \
        \    <enabled>true</enabled>\n      <__default>true</__default>\n      <connectionParameters>\n\
        \        <url>file:/path/to/nyc.shp</database>\n      </connectionParameters>\n\
        \    </dataStore>\n    ```\n\n  - application/json:\n\n    ```\n    {\n  \
        \    \"dataStore\": {\n        \"description\": \"A data store\",\n      \
        \  \"enabled\": \"true\",\n        \"_default\": \"true\",\n        \"connectionParameters\"\
        : {\n          \"entry\": [\n            {\"@key\":\"url\",\"$\":\"file:/path/to/nyc.shp\"\
        }\n          ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\
        \n  | key | description | level | type | required | default |\n  | --- | -----------\
        \ | ----- | ---- | -------- | ------- |\n  | cache and reuse memory maps |\
        \ only memory map a file one, then cache and reuse the map | advanced | Boolean\
        \ | False | `True` |\n  | namespace | uri to a the namespace | advanced |\
        \ URI | False | ` ` |\n  | filetype | Discriminator for directory stores |\
        \ program | String | False | `shapefile` |\n  | charset | character used to\
        \ decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1`\
        \ |\n  | create spatial index | enable/disable the automatic creation of spatial\
        \ index | advanced | Boolean | False | `True` |\n  | fstype | Enable using\
        \ a setting of 'shape'. | advanced | String | False | `shape` |\n  | url |\
        \ url to a .shp file | user | URL | True | ` ` |\n  | enable spatial index\
        \ | enable/disable the use of spatial index for local shapefiles | advanced\
        \ | Boolean | False | `True` |\n  | memory mapped buffer | enable/disable\
        \ the use of memory-mapped io | advanced | Boolean | False | `False` |\n \
        \ | timezone | time zone used to read dates from the DBF file | advanced |\
        \ TimeZone | False | `Pacific Standard Time` |\n\n- Directory of spatial files\
        \ (shapefiles)\n\n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n\
        \      <description>A data store</description>\n      <enabled>true</enabled>\n\
        \      <__default>true</__default>\n      <connectionParameters>\n       \
        \ <url>file:/path/to/directory</database>\n      </connectionParameters>\n\
        \    </dataStore>\n    ```\n\n  - application/json:\n\n    ```\n    {\n  \
        \    \"dataStore\": {\n        \"description\": \"A data store\",\n      \
        \  \"enabled\": \"true\",\n        \"_default\": \"true\",\n        \"connectionParameters\"\
        : {\n          \"entry\": [\n            {\"@key\":\"url\",\"$\":\"file:/path/to/directory\"\
        }\n          ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\
        \n  | key | description | level | type | required | default |\n  | --- | -----------\
        \ | ----- | ---- | -------- | ------- |\n  | cache and reuse memory maps |\
        \ only memory map a file one, then cache and reuse the map | advanced | Boolean\
        \ | False | `True` |\n  | namespace | uri to a the namespace | advanced |\
        \ URI | False | ` ` |\n  | filetype | Discriminator for directory stores |\
        \ program | String | False | `shapefile` |\n  | charset | character used to\
        \ decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1`\
        \ |\n  | create spatial index | enable/disable the automatic creation of spatial\
        \ index | advanced | Boolean | False | `True` |\n  | fstype | Enable using\
        \ a setting of 'shape'. | advanced | String | False | `shape` |\n  | url |\
        \ url to a .shp file | user | URL | True | ` ` |\n  | enable spatial index\
        \ | enable/disable the use of spatial index for local shapefiles | advanced\
        \ | Boolean | False | `True` |\n  | memory mapped buffer | enable/disable\
        \ the use of memory-mapped io | advanced | Boolean | False | `False` |\n \
        \ | timezone | time zone used to read dates from the DBF file | advanced |\
        \ TimeZone | False | `Pacific Standard Time` |\n\n\n- Web Feature Service\n\
        \n  Examples:\n  - application/xml:\n\n    ```\n    <dataStore>\n      <description>A\
        \ data store</description>\n      <enabled>true</enabled>\n      <__default>true</__default>\n\
        \      <connectionParameters>\n        <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>\n\
        \      </connectionParameters>\n    </dataStore>\n    ```\n\n  - application/json:\n\
        \n    ```\n    {\n      \"dataStore\": {\n        \"description\": \"A data\
        \ store\",\n        \"enabled\": \"true\",\n        \"_default\": \"true\"\
        ,\n        \"connectionParameters\": {\n          \"entry\": [\n         \
        \   {\"@key\":\"GET_CAPABILITIES_URL\",\"$\":\"http://localhost:8080/geoserver/wfs?request=GetCapabilities\"\
        }\n          ]\n        }\n      }\n    }\n    ```\n\n  Connection Parameters:\n\
        \n  | key | description | level | type | required | default |\n  | --- | -----------\
        \ | ----- | ---- | -------- | ------- |\n  | Protocol | Sets a preference\
        \ for the HTTP protocol to use when requesting WFS functionality. Set this\
        \ value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO |\
        \ user | Boolean | False | ` ` |\n  | WFS GetCapabilities URL | Represents\
        \ a URL to the getCapabilities document or a server instance. | user | URL\
        \ | False | ` ` |\n  | Buffer Size | This allows the user to specify a buffer\
        \ size in features. This param has a default value of 10 features. | user\
        \ | Integer | False | `10` |\n  | Filter compliance | Level of compliance\
        \ to WFS specification (0-low,1-medium,2-high) | user | Integer | False |\
        \ ` ` |\n  | EntityResolver | Sets the entity resolver used to expand XML\
        \ entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519`\
        \ |\n  | Time-out | This allows the user to specify a timeout in milliseconds.\
        \ This param has a default value of 3000ms. | user | Integer | False | `3000`\
        \ |\n  | GmlComplianceLevel | Optional OGC GML compliance level required.\
        \ | user | Integer | False | `0` |\n  | Lenient | Indicates that datastore\
        \ should do its best to create features from the provided data even if it\
        \ does not accurately match the schema.  Errors will be logged but the parsing\
        \ will continue if this is true.  Default is false | user | Boolean | False\
        \ | `False` |\n  | Password | This allows the user to specify a username.\
        \ This param should not be used without the USERNAME param. | user | String\
        \ | False | ` ` |\n  | Use Default SRS | Use always the declared DefaultSRS\
        \ for requests and reproject locally if necessary | advanced | Boolean | False\
        \ | `False` |\n  | Namespace | Override the original WFS type name namespaces\
        \ | advanced | String | False | ` ` |\n  | Username | This allows the user\
        \ to specify a username. This param should not be used without the PASSWORD\
        \ param. | user | String | False | ` ` |\n  | Axis Order Filter | Indicates\
        \ axis order used by the remote WFS server for filters. It applies only to\
        \ WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String\
        \ | False | ` ` |\n  | GmlCompatibleTypeNames | Use Gml Compatible TypeNames\
        \ (replace : by _). | user | Boolean | False | `False` |\n  | Maximum features\
        \ | Positive integer used as a hard limit for the amount of Features to retrieve\
        \ for each FeatureType. A value of zero or not providing this parameter means\
        \ no limit. | user | Integer | False | `0` |\n  | Axis Order | Indicates axis\
        \ order used by the remote WFS server in result coordinates. It applies only\
        \ to WFS 1.x.0 servers. Default is Compliant | advanced | String | False |\
        \ `Compliant` |\n  | WFS Strategy | Override wfs stragegy with either cubwerx,\
        \ ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user\
        \ | String | False | `auto` |\n  | Try GZIP | Indicates that datastore should\
        \ use gzip to transfer data if the server supports it. Default is true | user\
        \ | Boolean | False | `True` |\n  | Encoding | This allows the user to specify\
        \ the character encoding of the XML-Requests sent to the Server. Defaults\
        \ to UTF-8 | user | String | False | `UTF-8` |\n  | Outputformat | This allows\
        \ the user to specify an outputFormat, different from the default one. | advanced\
        \ | String | False | ` ` |\n"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/datastore"
      required: true
